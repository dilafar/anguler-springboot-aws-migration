{"version":"1.103.0","results":[{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"employeemanager/k8s/RDS/backend-deployment.yml","start":{"line":18,"col":5,"offset":299},"end":{"line":18,"col":9,"offset":303},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":299},"end":{"line":18,"col":9,"offset":303},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3bc47e1c060b91e939a2b6fa92bb3ac7bd819d6ce769377faee24b92ae45ac7198b4accfebd6504e4ad531b73f629213fbf3956b3197fad34e4254dc0bf5a1b4_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"employeemanager/k8s/RDS/backend-deployment.yml","start":{"line":20,"col":11,"offset":333},"end":{"line":20,"col":15,"offset":337},"extra":{"metavars":{"$NAME":{"start":{"line":20,"col":11,"offset":333},"end":{"line":20,"col":15,"offset":337},"abstract_content":"name"},"$CONTAINER":{"start":{"line":20,"col":17,"offset":339},"end":{"line":20,"col":33,"offset":355},"abstract_content":"employee-backend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-backend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6e7652bc334dc9ad34d1366de4e31071a004ae026552fe89978dfeb5d568b6f0b3134b7489e98bfbf2d0d55343c6d19fd7c663f3d2d6b4574c970f99663297cd_0","lines":"        - name: employee-backend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"employeemanager/k8s/RDS/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4729f8b8d4336b38c312e7d9b3cdf2c63b6e75f25ac26908ae34e640e2a888905aba3a575359d40bba2a413e7e01911540dacce2a510c5565a38c51e0bfb93de_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"employeemanager/k8s/RDS/frontend-deployment.yml","start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"extra":{"metavars":{"$NAME":{"start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"abstract_content":"name"},"$CONTAINER":{"start":{"line":20,"col":17,"offset":345},"end":{"line":20,"col":34,"offset":362},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78446d8c5858f1e9ffae8662b2e67e3c009c6776e312693578fff18c1d26be7a2d0fc8fcf19153ca778f3330507e47f1e73cf4d8b785edcc545291a7c459c2a0_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"employeemanager/k8s/mysql(docker image)/backend-deployment.yml","start":{"line":18,"col":5,"offset":299},"end":{"line":18,"col":9,"offset":303},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":299},"end":{"line":18,"col":9,"offset":303},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"29fae233658d94fd8a8afc3c768dd9eeb7e5f561626261dad8cdb1ca5ec78d1843246fccb1a9f9bf206e9d5ca4aec84c03e8f7058a0788760fc9fdb85c4a27c2_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"employeemanager/k8s/mysql(docker image)/backend-deployment.yml","start":{"line":24,"col":11,"offset":523},"end":{"line":24,"col":15,"offset":527},"extra":{"metavars":{"$NAME":{"start":{"line":24,"col":11,"offset":523},"end":{"line":24,"col":15,"offset":527},"abstract_content":"name"},"$CONTAINER":{"start":{"line":24,"col":17,"offset":529},"end":{"line":24,"col":33,"offset":545},"abstract_content":"employee-backend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-backend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c813d0f7db3cc35cf5fec396f9ef178623f46115c1b9053e03822fa173b4d6ccffb879e2a2229a34ae5482b8c31f1dc565a47192f3fdf170e584881fcc726633_0","lines":"        - name: employee-backend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"employeemanager/k8s/mysql(docker image)/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1e494aea1ae09146140d018cdc9f12ae29813255f0d337295df64b782a779435a3359e35cca32f8446e09ca6732da0161ca42e478441ffbbe1980ae2cef25c05_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"employeemanager/k8s/mysql(docker image)/frontend-deployment.yml","start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"extra":{"metavars":{"$NAME":{"start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"abstract_content":"name"},"$CONTAINER":{"start":{"line":20,"col":17,"offset":345},"end":{"line":20,"col":34,"offset":362},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"254bc93c502884869a4e373dda02903dd943e9d8cde44d2ac7c171ac26ee2a58ab7172ccc48e9d60fef3d2de7e1670f03f16597151140a0de4a940d9a60b21a6_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"employeemanager/k8s/mysql(docker image)/mysql-deployment.yml","start":{"line":17,"col":5,"offset":261},"end":{"line":17,"col":9,"offset":265},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":17,"col":5,"offset":261},"end":{"line":17,"col":9,"offset":265},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d5aa30d2d9880db83eaaf63a00facb90703e4157128bcc8494fb496f268adfc0472c8ab1b8d44eba893ccda6ebf6798bc0e49367032881d4b89c6f3c0d6cc1d4_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"employeemanager/k8s/mysql(docker image)/mysql-deployment.yml","start":{"line":19,"col":11,"offset":295},"end":{"line":19,"col":15,"offset":299},"extra":{"metavars":{"$NAME":{"start":{"line":19,"col":11,"offset":295},"end":{"line":19,"col":15,"offset":299},"abstract_content":"name"},"$CONTAINER":{"start":{"line":19,"col":17,"offset":301},"end":{"line":19,"col":22,"offset":306},"abstract_content":"mysql"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: mysql"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e207fa282662f4c6804503924d81ce68da1f26757d82abc75e116c949d20bee6d7e86c91c265b237d1cdada18ced6c394198ff8c2f52cf30ea6dd61076f3716a_0","lines":"        - name: mysql","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"generic.nginx.security.missing-ssl-version.missing-ssl-version","path":"employeemanagerfrontend/generated_openssl_cert/default-443.conf","start":{"line":1,"col":1,"offset":0},"end":{"line":12,"col":10,"offset":327},"extra":{"metavars":{"$PORT":{"start":{"line":2,"col":16,"offset":24},"end":{"line":2,"col":19,"offset":27},"abstract_content":"443"}},"message":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"references":["https://www.acunetix.com/blog/web-security-zone/hardening-nginx/","https://nginx.org/en/docs/http/configuring_https_servers.html"],"category":"security","technology":["nginx"],"confidence":"MEDIUM","owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version","shortlink":"https://sg.run/3xzl","semgrep.dev":{"rule":{"origin":"community","r_id":9043,"rule_id":"KxUbeA","rule_name":"generic.nginx.security.missing-ssl-version.missing-ssl-version","rv_id":945303,"url":"https://semgrep.dev/playground/r/JdTDypL/generic.nginx.security.missing-ssl-version.missing-ssl-version","version_id":"JdTDypL"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c68ad207670911c3c46db57243d8e2ed37d1542ecb1fa778d9983476358354b63e939cbc3a34db652524cec02a94bbafa0c32b6039d88e1c9e382429a814fcd4_0","lines":"server {\n        listen 443 ssl;\n        listen  [::]:443 ssl;\n        server_name localhost;\n\n        ssl_certificate /etc/nginx/certs/nginx_fkey.crt;\n        ssl_certificate_key /etc/nginx/certs/nginx_fkey.key;\n\n        location / {\n            root   /usr/share/nginx/html;\n            index  index.html index.htm;\n        }","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"ssc-c4858a1a-33b9-4bc2-8738-94eeaedbea40","path":"employeemanagerfrontend/package-lock.json","start":{"line":6118,"col":1,"offset":1},"end":{"line":6118,"col":1,"offset":1},"extra":{"metavars":{},"message":"Affected versions of cross-spawn are vulnerable to Inefficient Regular Expression Complexity.","metadata":{"confidence":"HIGH","category":"security","cve":"CVE-2024-21538","cwe":["CWE-1333: Inefficient Regular Expression Complexity"],"ghsa":"GHSA-3xgq-45jj-v275","owasp":["A06:2021 - Vulnerable and Outdated Components"],"publish-date":"2024-11-08T06:30:47Z","references":["https://github.com/advisories/GHSA-3xgq-45jj-v275","https://nvd.nist.gov/vuln/detail/CVE-2024-21538"],"sca-fix-versions":[{"cross-spawn":"7.0.5"},{"cross-spawn":"6.0.6"}],"sca-kind":"reachable","sca-schema":20230302,"sca-severity":"HIGH","sca-vuln-database-identifier":"CVE-2024-21538","technology":["js","ts"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Denial-of-Service (DoS)"],"semgrep.dev":{"rule":{"r_id":150395,"rv_id":949423,"rule_id":"BYUX3qD","version_id":"rxT69lv","url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-c4858a1a-33b9-4bc2-8738-94eeaedbea40","origin":"custom","rule_name":"ssc-c4858a1a-33b9-4bc2-8738-94eeaedbea40"},"src":"unchanged"},"source":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-c4858a1a-33b9-4bc2-8738-94eeaedbea40","semgrep.url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-c4858a1a-33b9-4bc2-8738-94eeaedbea40","dev.semgrep.actions":[]},"severity":"ERROR","fingerprint":"29fb92946e22cb92b6c1ce810ae2b8fb082be17a835587622c1110d79341e47d121b298e5cab0f09c394ecb261dbadb39a770f37036f16f482d7e5e9c5cff2cc_0","lines":"    \"node_modules/cross-spawn\": {","is_ignored":false,"sca_info":{"reachable":false,"reachability_rule":true,"sca_finding_schema":20220913,"dependency_match":{"dependency_pattern":{"ecosystem":"npm","package":"cross-spawn","semver_range":">=7.0.0, <7.0.5"},"found_dependency":{"package":"cross-spawn","version":"7.0.3","ecosystem":"npm","allowed_hashes":{"sha512":["8910cf24a50f544343edd1cf3bcae46ce9cfa720f281c0c5b568e9796342832f163f6ad77315cbf13b2445e425e8eac1d86efe509ada82cd6ad7916e75cec6eb"]},"resolved_url":"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz","transitivity":"transitive","manifest_path":"employeemanagerfrontend/package.json","lockfile_path":"employeemanagerfrontend/package-lock.json","line_number":6118},"lockfile":"employeemanagerfrontend/package-lock.json"}},"engine_kind":"OSS"}},{"check_id":"ssc-parity-1db037c51064e8ea3ee503f6b2c05bd51b27b4b4","path":"employeemanagerfrontend/package-lock.json","start":{"line":9916,"col":1,"offset":1},"end":{"line":9916,"col":1,"offset":1},"extra":{"metavars":{},"message":"Affected versions of nanoid are vulnerable to Loop with Unreachable Exit Condition ('Infinite Loop').","metadata":{"confidence":"LOW","category":"security","cve":"CVE-2024-55565","cwe":["CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"],"ghsa":"GHSA-mwcw-c2x4-8c55","owasp":["A06:2021 - Vulnerable and Outdated Components"],"publish-date":"2024-12-09T03:30:59Z","references":["https://github.com/advisories/GHSA-mwcw-c2x4-8c55","https://nvd.nist.gov/vuln/detail/CVE-2024-55565"],"sca-fix-versions":[{"nanoid":"5.0.9"},{"nanoid":"3.3.8"}],"sca-kind":"legacy","sca-schema":20230302,"sca-severity":"MODERATE","sca-vuln-database-identifier":"CVE-2024-55565","technology":["js","ts"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"semgrep.dev":{"rule":{"r_id":150589,"rv_id":973540,"rule_id":"qNU28n9","version_id":"5PT9Ezv","url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1db037c51064e8ea3ee503f6b2c05bd51b27b4b4","origin":"custom","rule_name":"ssc-parity-1db037c51064e8ea3ee503f6b2c05bd51b27b4b4"},"src":"unchanged"},"source":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1db037c51064e8ea3ee503f6b2c05bd51b27b4b4","semgrep.url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1db037c51064e8ea3ee503f6b2c05bd51b27b4b4","dev.semgrep.actions":[]},"severity":"WARNING","fingerprint":"f54c1373cc973d17c8a17ec128bbaf13a2bafaad746824c8a971553294128097bb070939e80a7af7cc60464133c2917461b12ea6597a9bfc4371beac21038245_0","lines":"    \"node_modules/nanoid\": {","is_ignored":false,"sca_info":{"reachable":false,"reachability_rule":false,"sca_finding_schema":20220913,"dependency_match":{"dependency_pattern":{"ecosystem":"npm","package":"nanoid","semver_range":"<3.3.8"},"found_dependency":{"package":"nanoid","version":"3.3.7","ecosystem":"npm","allowed_hashes":{"sha512":["792469a6370f21ab5120c0b553a52780ff1715ccfc31058641db75313050ecd6809af5c37ef3716ef595df1db2e8274451c8824ac0c70d065b858681f10128da"]},"resolved_url":"https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz","transitivity":"transitive","manifest_path":"employeemanagerfrontend/package.json","lockfile_path":"employeemanagerfrontend/package-lock.json","line_number":9916},"lockfile":"employeemanagerfrontend/package-lock.json"}},"engine_kind":"OSS"}},{"check_id":"ssc-parity-1946bba06ac932deee96a062cfc20f7fc7650849","path":"employeemanagerfrontend/package-lock.json","start":{"line":10842,"col":1,"offset":1},"end":{"line":10842,"col":1,"offset":1},"extra":{"metavars":{},"message":"Affected versions of path-to-regexp are vulnerable to Inefficient Regular Expression Complexity.","metadata":{"confidence":"LOW","category":"security","cve":"CVE-2024-52798","cwe":["CWE-1333: Inefficient Regular Expression Complexity"],"ghsa":"GHSA-rhx6-c78j-4q9w","owasp":["A06:2021 - Vulnerable and Outdated Components"],"publish-date":"2024-12-05T22:40:47Z","references":["https://github.com/advisories/GHSA-rhx6-c78j-4q9w","https://nvd.nist.gov/vuln/detail/CVE-2024-52798"],"sca-fix-versions":[{"path-to-regexp":"0.1.12"}],"sca-kind":"legacy","sca-schema":20230302,"sca-severity":"HIGH","sca-vuln-database-identifier":"CVE-2024-52798","technology":["js","ts"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Denial-of-Service (DoS)"],"semgrep.dev":{"rule":{"r_id":150365,"rv_id":977761,"rule_id":"d8Urd17","version_id":"LjTXxq3","url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1946bba06ac932deee96a062cfc20f7fc7650849","origin":"custom","rule_name":"ssc-parity-1946bba06ac932deee96a062cfc20f7fc7650849"},"src":"unchanged"},"source":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1946bba06ac932deee96a062cfc20f7fc7650849","semgrep.url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-1946bba06ac932deee96a062cfc20f7fc7650849","dev.semgrep.actions":[]},"severity":"WARNING","fingerprint":"bef16c587fe8cf0ab6113e233271a6f9d2a6f35a581dd8710ad71046d4093b2079f5e85709075a748a5d34ef612dec0d20c2b90777cc88d737256933750ec4fb_0","lines":"    \"node_modules/path-to-regexp\": {","is_ignored":false,"sca_info":{"reachable":false,"reachability_rule":false,"sca_finding_schema":20220913,"dependency_match":{"dependency_pattern":{"ecosystem":"npm","package":"path-to-regexp","semver_range":"<0.1.12"},"found_dependency":{"package":"path-to-regexp","version":"0.1.10","ecosystem":"npm","allowed_hashes":{"sha512":["ee57fba9c42275392ed06bb76033dcf03275abb38eb9c7dafc14ac2308ee879e9553b91ab45bee33c8542df930077167b3faec545ecfc0f295c35b25e4a412f7"]},"resolved_url":"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.10.tgz","transitivity":"transitive","manifest_path":"employeemanagerfrontend/package.json","lockfile_path":"employeemanagerfrontend/package-lock.json","line_number":10842},"lockfile":"employeemanagerfrontend/package-lock.json"}},"engine_kind":"OSS"}},{"check_id":"ssc-parity-cc1c057da32f145d61ce2c29f2000e4c8deefa13","path":"employeemanagerfrontend/package-lock.json","start":{"line":13233,"col":1,"offset":1},"end":{"line":13233,"col":1,"offset":1},"extra":{"metavars":{},"message":"Affected versions of vite are vulnerable to Missing Origin Validation in WebSockets / Origin Validation Error / Reliance on Reverse DNS Resolution for a Security-Critical Action.","metadata":{"confidence":"LOW","category":"security","cve":"CVE-2025-24010","cwe":["CWE-1385: Missing Origin Validation in WebSockets","CWE-346: Origin Validation Error","CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action"],"ghsa":"GHSA-vg6x-rcgg-rjx6","owasp":["A06:2021 - Vulnerable and Outdated Components","A07:2021 - Identification and Authentication Failures"],"publish-date":"2025-01-21T19:52:55Z","references":["https://github.com/advisories/GHSA-vg6x-rcgg-rjx6","https://nvd.nist.gov/vuln/detail/CVE-2025-24010"],"sca-fix-versions":[{"vite":"6.0.9"},{"vite":"5.4.12"},{"vite":"4.5.6"}],"sca-kind":"legacy","sca-schema":20230302,"sca-severity":"MODERATE","sca-vuln-database-identifier":"CVE-2025-24010","technology":["js","ts"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication","Other"],"semgrep.dev":{"rule":{"r_id":152736,"rv_id":977166,"rule_id":"r6UyzZL","version_id":"A8TJnwg","url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-cc1c057da32f145d61ce2c29f2000e4c8deefa13","origin":"custom","rule_name":"ssc-parity-cc1c057da32f145d61ce2c29f2000e4c8deefa13"},"src":"unchanged"},"source":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-cc1c057da32f145d61ce2c29f2000e4c8deefa13","semgrep.url":"https://semgrep.dev/orgs/-/supply-chain/advisories?q=ssc-parity-cc1c057da32f145d61ce2c29f2000e4c8deefa13","dev.semgrep.actions":[]},"severity":"WARNING","fingerprint":"571a23d07f37e5ac55a8eb9fe8f4fab58d21b68d31e7381d2146378a3658997e4e0d230a5f7636cc3b75c3e9da3e76e59c500d7e9381b63a78578207bec45c01_0","lines":"    \"node_modules/vite\": {","is_ignored":false,"sca_info":{"reachable":false,"reachability_rule":false,"sca_finding_schema":20220913,"dependency_match":{"dependency_pattern":{"ecosystem":"npm","package":"vite","semver_range":">=5.0.0, <=5.4.11"},"found_dependency":{"package":"vite","version":"5.4.6","ecosystem":"npm","allowed_hashes":{"sha512":["21e2f97fc38ee67ca5b20cddf6dab8a83d90a88d24d8240b1ab583d2b08dd0440966904ae6f240c7423e18390c397c505ff39f14732e2c8c7a75d031197fe4f9"]},"resolved_url":"https://registry.npmjs.org/vite/-/vite-5.4.6.tgz","transitivity":"transitive","manifest_path":"employeemanagerfrontend/package.json","lockfile_path":"employeemanagerfrontend/package-lock.json","line_number":13233},"lockfile":"employeemanagerfrontend/package-lock.json"}},"engine_kind":"OSS"}},{"check_id":"html.security.audit.missing-integrity.missing-integrity","path":"employeemanagerfrontend/src/index.html","start":{"line":15,"col":3,"offset":720},"end":{"line":15,"col":75,"offset":792},"extra":{"metavars":{"$...A":{"start":{"line":15,"col":10,"offset":727},"end":{"line":15,"col":65,"offset":782},"abstract_content":" src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\""}},"message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.","metadata":{"category":"security","technology":["html"],"cwe":["CWE-353: Missing Support for Integrity Check"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"confidence":"LOW","references":["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","shortlink":"https://sg.run/krXA","semgrep.dev":{"rule":{"origin":"community","r_id":13728,"rule_id":"AbUQzj","rule_name":"html.security.audit.missing-integrity.missing-integrity","rv_id":945620,"url":"https://semgrep.dev/playground/r/o5TZeRL/html.security.audit.missing-integrity.missing-integrity","version_id":"o5TZeRL"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a91b97bdd89146439b38a2478fcd8f7c3e5a87a36b73875b905c708d4f8d59f48e147d8add5489c3cba08b1ab0ca9e8e2cdf6aee32911f4d807d61e4403e302d_0","lines":"  <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"html.security.audit.missing-integrity.missing-integrity","path":"employeemanagerfrontend/src/index.html","start":{"line":16,"col":3,"offset":795},"end":{"line":16,"col":100,"offset":892},"extra":{"metavars":{"$...A":{"start":{"line":16,"col":10,"offset":802},"end":{"line":16,"col":90,"offset":882},"abstract_content":" src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\""}},"message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.","metadata":{"category":"security","technology":["html"],"cwe":["CWE-353: Missing Support for Integrity Check"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"confidence":"LOW","references":["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","shortlink":"https://sg.run/krXA","semgrep.dev":{"rule":{"origin":"community","r_id":13728,"rule_id":"AbUQzj","rule_name":"html.security.audit.missing-integrity.missing-integrity","rv_id":945620,"url":"https://semgrep.dev/playground/r/o5TZeRL/html.security.audit.missing-integrity.missing-integrity","version_id":"o5TZeRL"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4e93330e0cba17263d8cbcdf45c2daf749d6ba6171e8113defb7e659e1636a41ec8999971f7e52f1e7613e85579684f15cf049e1970ebcb122beba2a92fce94c_0","lines":"  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\"></script>","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"html.security.audit.missing-integrity.missing-integrity","path":"employeemanagerfrontend/src/index.html","start":{"line":17,"col":3,"offset":895},"end":{"line":17,"col":97,"offset":989},"extra":{"metavars":{"$...A":{"start":{"line":17,"col":10,"offset":902},"end":{"line":17,"col":87,"offset":979},"abstract_content":" src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\""}},"message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.","metadata":{"category":"security","technology":["html"],"cwe":["CWE-353: Missing Support for Integrity Check"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"confidence":"LOW","references":["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","shortlink":"https://sg.run/krXA","semgrep.dev":{"rule":{"origin":"community","r_id":13728,"rule_id":"AbUQzj","rule_name":"html.security.audit.missing-integrity.missing-integrity","rv_id":945620,"url":"https://semgrep.dev/playground/r/o5TZeRL/html.security.audit.missing-integrity.missing-integrity","version_id":"o5TZeRL"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8cc6190a11687c171682d06ad308394548d0e0bc0449c80ac25474aca4fdf5ed1172c1cbedc471b229c43cf38e3827e5015097a6dfb1122590810c52314bead0_0","lines":"  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\"></script>","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"helm/charts/frontend/templates/deployment.yaml","start":{"line":18,"col":5,"offset":379},"end":{"line":18,"col":9,"offset":383},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":379},"end":{"line":18,"col":9,"offset":383},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"53635fb976c987420e897fea8edaf15bd180c37859418e400d281fbf663e823a36a9df246208df9c72ddc93c069c227ca38cff5927e6f43028013f96e90bafbf_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"helm/charts/frontend/templates/deployment.yaml","start":{"line":20,"col":11,"offset":413},"end":{"line":20,"col":15,"offset":417},"extra":{"metavars":{"$NAME":{"start":{"line":20,"col":11,"offset":413},"end":{"line":20,"col":15,"offset":417},"abstract_content":"name"},"$CONTAINER":{"start":{"line":20,"col":17,"offset":419},"end":{"line":20,"col":37,"offset":439},"abstract_content":"(())"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: {{ .Values.appName }}"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"065a275cf36c5ef028004ba6555cff3d9377532c8104b0c225780602f390ec80ce95f75e3b9b74a1fe6c84093d87daaa223b3eaeee0edf7f6a90df6cb95cf201_0","lines":"        - name: {{ .Values.appName }}","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","path":"k8s/backend-deployment.yml","start":{"line":40,"col":11,"offset":1099},"end":{"line":40,"col":26,"offset":1114},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":16,"offset":15},"abstract_content":"securityContext"},"$CONTAINER":{"start":{"line":24,"col":17,"offset":521},"end":{"line":24,"col":33,"offset":537},"abstract_content":"employee-backend"},"$SC":{"start":{"line":40,"col":11,"offset":1099},"end":{"line":40,"col":26,"offset":1114},"abstract_content":"securityContext"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false #","fixed_lines":["          securityContext:","            allowPrivilegeEscalation: false #:"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","shortlink":"https://sg.run/ljp6","semgrep.dev":{"rule":{"origin":"community","r_id":10057,"rule_id":"6JUqEO","rule_name":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","rv_id":947052,"url":"https://semgrep.dev/playground/r/d6TPzeB/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","version_id":"d6TPzeB"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c917a07f18d06b055833ba1e5ade81af8db41812249fb4063a82a320f98fa41ae54ae316f785a4a6cac2fa3720273c370c03ad1c2a218e3022503b7c29027de0_0","lines":"          securityContext:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"k8s/externalDNS.yml","start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"extra":{"metavars":{"$NAME":{"start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"abstract_content":"name"},"$CONTAINER":{"start":{"line":55,"col":17,"offset":1237},"end":{"line":55,"col":29,"offset":1249},"abstract_content":"external-dns"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: external-dns"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"0ea6673b0779fb5bb6622fb04379e8e7d41c47ee978d8aef679c17c9078e3ee42483214c83c0c2c53dc0632ff213ecbd055337a39a207e460020baa9cdf86ab3_0","lines":"        - name: external-dns","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"k8s/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d502b6d375246e673a73913362b5c4d4ee69b10a5d3d459f2e27dd5338a64380c33364274d505d198991e475616ac360e475a7195f315572271d74a3b30cc925_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"k8s/frontend-deployment.yml","start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"extra":{"metavars":{"$NAME":{"start":{"line":20,"col":11,"offset":339},"end":{"line":20,"col":15,"offset":343},"abstract_content":"name"},"$CONTAINER":{"start":{"line":20,"col":17,"offset":345},"end":{"line":20,"col":34,"offset":362},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"92441bb410cf893d4659c205ba3c7af6ddd6bf0e577777e1c6e50de9468f007f9492ef4c6877108be6ffa1760ae431ac6cb3c2271e66096289af24a1d07183b8_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","path":"kustomization-backup/backend-deployment.yml","start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":16,"offset":15},"abstract_content":"securityContext"},"$CONTAINER":{"start":{"line":26,"col":17,"offset":578},"end":{"line":26,"col":33,"offset":594},"abstract_content":"employee-backend"},"$SC":{"start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"abstract_content":"securityContext"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false #","fixed_lines":["          securityContext:","            allowPrivilegeEscalation: false #:"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","shortlink":"https://sg.run/ljp6","semgrep.dev":{"rule":{"origin":"community","r_id":10057,"rule_id":"6JUqEO","rule_name":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","rv_id":947052,"url":"https://semgrep.dev/playground/r/d6TPzeB/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","version_id":"d6TPzeB"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"520b42e6d14d5e2f0a95602bda76a44ff030bbae2b57f7cc5bd56f5c20ea039145c2ed334282655012643c0525e391df57ab513b2f6cbeebfeb63efd97bfc925_0","lines":"          securityContext:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","path":"kustomization-backup/base/backend-deployment.yml","start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":16,"offset":15},"abstract_content":"securityContext"},"$CONTAINER":{"start":{"line":26,"col":17,"offset":578},"end":{"line":26,"col":33,"offset":594},"abstract_content":"employee-backend"},"$SC":{"start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"abstract_content":"securityContext"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false #","fixed_lines":["          securityContext:","            allowPrivilegeEscalation: false #:"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","shortlink":"https://sg.run/ljp6","semgrep.dev":{"rule":{"origin":"community","r_id":10057,"rule_id":"6JUqEO","rule_name":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","rv_id":947052,"url":"https://semgrep.dev/playground/r/d6TPzeB/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","version_id":"d6TPzeB"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c7d22f85df92e044d80ad7d97bd7fa155bebb833afea461af81c57c4ea0dab1cae815dc143cdc97fd192e36dd51ea4a97d223c7ccde6987ced8b605e192c9d82_0","lines":"          securityContext:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"kustomization-backup/base/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"747f2ed0aef32e5e916a66632776f6a77ae656db698651b5d02fb41e009fd0efb48afeae76c004f108cd0b8a8101be1ff208d9fc7886bb5b77d3ecfc3d734e7f_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomization-backup/base/frontend-deployment.yml","start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"extra":{"metavars":{"$NAME":{"start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"abstract_content":"name"},"$CONTAINER":{"start":{"line":22,"col":17,"offset":402},"end":{"line":22,"col":34,"offset":419},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"643cdfca74fc49636fa4e3490362173a3c0c3d22a6c13e3040a5139eae2dac11a34b15a7bedd541cdd6d2bf26113cf034e5768fec95f753d19b49a4848c8e38f_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomization-backup/externalDNS.yml","start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"extra":{"metavars":{"$NAME":{"start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"abstract_content":"name"},"$CONTAINER":{"start":{"line":55,"col":17,"offset":1237},"end":{"line":55,"col":29,"offset":1249},"abstract_content":"external-dns"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: external-dns"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"bfa92173cd324ed2af34a5ba379b214d56128c1ec511c14bcf2dfec41fae8b16c792ee7ba1d84ca39fcd8feb7e8542d99de6c4429fdb73d62aadf48fc1da90c9_0","lines":"        - name: external-dns","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"kustomization-backup/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"83d90695417c205cc9bfb7a82a513912a17fe371855bdd57d3f389bf972f6529c2f4217f9283124cd3d7a7341c850b0f49d30628d42c0d9fbf438519049983ea_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomization-backup/frontend-deployment.yml","start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"extra":{"metavars":{"$NAME":{"start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"abstract_content":"name"},"$CONTAINER":{"start":{"line":22,"col":17,"offset":402},"end":{"line":22,"col":34,"offset":419},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c40331f8f31692428a5ebd86bf72da875c0637c97d74cb462f3a9c29c8b9d4efa9a72f9c626c2caf1971ecf2d845bd69ffc642c1160fd99eba49afd70fc702ea_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomization-backup/platform/external-dns/externalDNS.yml","start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"extra":{"metavars":{"$NAME":{"start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"abstract_content":"name"},"$CONTAINER":{"start":{"line":55,"col":17,"offset":1237},"end":{"line":55,"col":29,"offset":1249},"abstract_content":"external-dns"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: external-dns"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"59038ce3a8bc831caff6e674126cfaa44e99cabac0d79d3c755f9fb0602f1d45b5965814702e7944422edc581248400c6d09ed2c307a1323252072a75c783e19_0","lines":"        - name: external-dns","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","path":"kustomize/base/backend-deployment.yml","start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":16,"offset":15},"abstract_content":"securityContext"},"$CONTAINER":{"start":{"line":26,"col":17,"offset":578},"end":{"line":26,"col":33,"offset":594},"abstract_content":"employee-backend"},"$SC":{"start":{"line":43,"col":11,"offset":1233},"end":{"line":43,"col":26,"offset":1248},"abstract_content":"securityContext"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false #","fixed_lines":["          securityContext:","            allowPrivilegeEscalation: false #:"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","shortlink":"https://sg.run/ljp6","semgrep.dev":{"rule":{"origin":"community","r_id":10057,"rule_id":"6JUqEO","rule_name":"yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","rv_id":947052,"url":"https://semgrep.dev/playground/r/d6TPzeB/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","version_id":"d6TPzeB"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"51db4f0b7fd99432e4b685a176eeb3e3e2c047e8c4b41646e20c87cea32d599bbe707391c881f017d1420bd402ad59b882ac39747c3361220d1cb3c19552806b_0","lines":"          securityContext:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","path":"kustomize/base/frontend-deployment.yml","start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"spec"},"$SPEC":{"start":{"line":18,"col":5,"offset":305},"end":{"line":18,"col":9,"offset":309},"abstract_content":"spec"}},"message":"When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.","fix":"spec:\n      securityContext:\n        runAsNonRoot: true #","fixed_lines":["    spec:","      securityContext:","        runAsNonRoot: true #:"],"metadata":{"references":["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/","https://kubernetes.io/docs/concepts/policy/pod-security-policy/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"],"category":"security","cwe":["CWE-250: Execution with Unnecessary Privileges"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"technology":["kubernetes"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","shortlink":"https://sg.run/dgP5","semgrep.dev":{"rule":{"origin":"community","r_id":10134,"rule_id":"ZqUqeK","rule_name":"yaml.kubernetes.security.run-as-non-root.run-as-non-root","rv_id":947064,"url":"https://semgrep.dev/playground/r/JdTDP66/yaml.kubernetes.security.run-as-non-root.run-as-non-root","version_id":"JdTDP66"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c214a7c5612fc7e52aecfd52269213e835497e2044003e171778a745c029555337f1916e9984933999c29e17489c3be720641b763e85d0452b0a434fdfcc0522_0","lines":"    spec:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomize/base/frontend-deployment.yml","start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"extra":{"metavars":{"$NAME":{"start":{"line":22,"col":11,"offset":396},"end":{"line":22,"col":15,"offset":400},"abstract_content":"name"},"$CONTAINER":{"start":{"line":22,"col":17,"offset":402},"end":{"line":22,"col":34,"offset":419},"abstract_content":"employee-frontend"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: employee-frontend"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"68d90c046eccb1ce8dc65603d36f1766b7cba481e0c637a4b0c059aea82cb0a40a279955b946f80ef47f88691cf191765ff931eb9915fd8c0287118ab7f45c6f_0","lines":"        - name: employee-frontend","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"kustomize/platform/external-dns/externalDNS.yml","start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"extra":{"metavars":{"$NAME":{"start":{"line":55,"col":11,"offset":1231},"end":{"line":55,"col":15,"offset":1235},"abstract_content":"name"},"$CONTAINER":{"start":{"line":55,"col":17,"offset":1237},"end":{"line":55,"col":29,"offset":1249},"abstract_content":"external-dns"}},"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","fixed_lines":["        - securityContext:","            allowPrivilegeEscalation: false","          name: external-dns"],"metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR","semgrep.dev":{"rule":{"origin":"community","r_id":47276,"rule_id":"WAU5J6","rule_name":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","rv_id":947050,"url":"https://semgrep.dev/playground/r/e1T9vzn/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","version_id":"e1T9vzn"},"src":"unchanged"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":152894,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"3d18f51d36d9844c9e9ef7ac67cd3bb8e840b2ead9af30eb3f55e338a869bc4a31ea34a9d611954a59352e2e01421ef696d53b001786d0c4508cce012cd0a986_0","lines":"        - name: external-dns","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"employeemanagerfrontend/Dockerfile","start":{"line":9,"col":14,"offset":0},"end":{"line":9,"col":29,"offset":15}}]],"message":"Syntax error at line employeemanagerfrontend/Dockerfile:9:\n `--configuration` was unexpected","path":"employeemanagerfrontend/Dockerfile","spans":[{"file":"employeemanagerfrontend/Dockerfile","start":{"line":9,"col":14,"offset":0},"end":{"line":9,"col":29,"offset":15}}]},{"code":2,"level":"warn","type":"Other syntax error","message":"Other syntax error at line helm/charts/frontend/templates/service.yaml:4:\n (approximate error location; error nearby after) error calling parser: did not find expected key character 0 position 0 returned: 0","path":"helm/charts/frontend/templates/service.yaml"},{"code":2,"level":"warn","type":"Other syntax error","message":"Other syntax error at line helm/charts/backend/templates/service.yaml:4:\n (approximate error location; error nearby after) error calling parser: did not find expected key character 0 position 0 returned: 0","path":"helm/charts/backend/templates/service.yaml"},{"code":2,"level":"warn","type":"Other syntax error","message":"Other syntax error at line helm/charts/backend/templates/deployment.yaml:30:\n (approximate error location; error nearby after) error calling parser: did not find expected node content character 0 position 0 returned: 0","path":"helm/charts/backend/templates/deployment.yaml"},{"code":2,"level":"warn","type":"Other syntax error","message":"Other syntax error at line helm/charts/frontend/templates/ingress.yaml:29:\n (approximate error location; error nearby after) error calling parser: did not find expected key character 0 position 0 returned: 0","path":"helm/charts/frontend/templates/ingress.yaml"}],"paths":{"scanned":[".gitignore","Jenkins_ebs_backup","Jenkinsfile","Jenkinsfile-2","Jenkinsfile-backup","ansible/ansible.cfg","ansible/ebs-deploy.yml","ansible/stage.inventory","azure/command.md","azure-pipelines-aks.yml","azure-pipelines.yml","docker-compose.yml","eks/clean-snapshots.py","eks/monitor-website.py","eks/node-volumes-backup.py","eks/restore-volumes.py","employeemanager/.gitattributes","employeemanager/.gitignore","employeemanager/.mvn/wrapper/maven-wrapper.properties","employeemanager/.scannerwork/.sonar_lock","employeemanager/.scannerwork/report-task.txt","employeemanager/Dockerfile","employeemanager/dependency-check-suppressions.xml","employeemanager/docker-compose-mysql.yml","employeemanager/docker-compose.yml","employeemanager/dockerfile-security.rego","employeemanager/hadolint_lint.txt","employeemanager/k8s/RDS/backend-deployment.yml","employeemanager/k8s/RDS/backend-service.yml","employeemanager/k8s/RDS/frontend-deployment.yml","employeemanager/k8s/RDS/frontend-service.yml","employeemanager/k8s/RDS/mysql-externalName-service.yml","employeemanager/k8s/RDS/persistent-volume-claim.yml","employeemanager/k8s/RDS/secret.yml","employeemanager/k8s/RDS/storage-class.yml","employeemanager/k8s/mysql(docker image)/backend-deployment.yml","employeemanager/k8s/mysql(docker image)/backend-service.yml","employeemanager/k8s/mysql(docker image)/db-creation-configmap.yml","employeemanager/k8s/mysql(docker image)/frontend-deployment.yml","employeemanager/k8s/mysql(docker image)/frontend-service.yml","employeemanager/k8s/mysql(docker image)/mysql-deployment.yml","employeemanager/k8s/mysql(docker image)/mysql-service.yml","employeemanager/k8s/mysql(docker image)/persistent-volume-claim.yml","employeemanager/k8s/mysql(docker image)/secret.yml","employeemanager/k8s/mysql(docker image)/storage-class.yml","employeemanager/mvnw","employeemanager/mvnw.cmd","employeemanager/pom.xml","employeemanager/results.json","employeemanager/src/main/java/com/employees/employeemanager/EmployeemanagerApplication.java","employeemanager/src/main/java/com/employees/employeemanager/constants/EmployeeConstants.java","employeemanager/src/main/java/com/employees/employeemanager/controller/EmployeeController.java","employeemanager/src/main/java/com/employees/employeemanager/dto/EmployeeDto.java","employeemanager/src/main/java/com/employees/employeemanager/dto/ErrorResponseDto.java","employeemanager/src/main/java/com/employees/employeemanager/dto/ResponseDto.java","employeemanager/src/main/java/com/employees/employeemanager/entity/Employee.java","employeemanager/src/main/java/com/employees/employeemanager/exception/EmployeeAlreadyExistsException.java","employeemanager/src/main/java/com/employees/employeemanager/exception/EmptyResourceListException.java","employeemanager/src/main/java/com/employees/employeemanager/exception/GlobalExceptionHandler.java","employeemanager/src/main/java/com/employees/employeemanager/exception/ResourceNotFoundException.java","employeemanager/src/main/java/com/employees/employeemanager/mapper/EmployeeMapper.java","employeemanager/src/main/java/com/employees/employeemanager/repository/EmployeeRepository.java","employeemanager/src/main/java/com/employees/employeemanager/service/IEmployeeService.java","employeemanager/src/main/java/com/employees/employeemanager/service/impl/EmployeeServiceImpl.java","employeemanager/src/main/resources/application.yml","employeemanager/test.txt","employeemanager/trivy-docker-image-scan.sh","employeemanager/trivy.json","employeemanager/trivy_critical.json","employeemanager/upload-reports.py","employeemanagerfrontend/.dockerignore","employeemanagerfrontend/.editorconfig","employeemanagerfrontend/.gitignore","employeemanagerfrontend/.vscode/extensions.json","employeemanagerfrontend/.vscode/launch.json","employeemanagerfrontend/.vscode/tasks.json","employeemanagerfrontend/Dockerfile","employeemanagerfrontend/Dockerfile-backup","employeemanagerfrontend/README.md","employeemanagerfrontend/angular.json","employeemanagerfrontend/docker-compose.yml","employeemanagerfrontend/dockerfile-security.rego","employeemanagerfrontend/eks/command.md","employeemanagerfrontend/generated_openssl_cert/.gitignore","employeemanagerfrontend/generated_openssl_cert/default-443.conf","employeemanagerfrontend/generated_openssl_cert/default.conf","employeemanagerfrontend/hadolint_lint_front.tx","employeemanagerfrontend/next-lock.cache","employeemanagerfrontend/nginx/.gitignore","employeemanagerfrontend/nginx/Dockerfile","employeemanagerfrontend/nginx/default.conf","employeemanagerfrontend/njsscan.sarif","employeemanagerfrontend/node-lock.cache","employeemanagerfrontend/package-lock.json","employeemanagerfrontend/package.json","employeemanagerfrontend/public/favicon.ico","employeemanagerfrontend/retire.json","employeemanagerfrontend/src/app/app.component.css","employeemanagerfrontend/src/app/app.component.html","employeemanagerfrontend/src/app/app.component.spec.ts","employeemanagerfrontend/src/app/app.component.ts","employeemanagerfrontend/src/app/app.config.ts","employeemanagerfrontend/src/app/app.routes.ts","employeemanagerfrontend/src/app/models/employee.ts","employeemanagerfrontend/src/app/models/response.ts","employeemanagerfrontend/src/app/services/employee.service.ts","employeemanagerfrontend/src/environments/environment.ts","employeemanagerfrontend/src/index.html","employeemanagerfrontend/src/main.ts","employeemanagerfrontend/src/styles.css","employeemanagerfrontend/test.yml","employeemanagerfrontend/trivy-docker-image-scan.sh","employeemanagerfrontend/trivy.json","employeemanagerfrontend/tsconfig.app.json","employeemanagerfrontend/tsconfig.json","employeemanagerfrontend/tsconfig.spec.json","employeemanagerfrontend/upload-reports.py","environment-setup/alb-externalDNS/command.md","environment-setup/alb-externalDNS/external_dns.json","environment-setup/aws-loadbalancer-controller/command.md","environment-setup/aws-loadbalancer-controller/iam_policy_latest.json","environment-setup/command.md","environment-setup/ebs/command.md","environment-setup/ebs/policy.json","git-command.sh","hadolint_lint.txt","hadolint_lint_front.txt","helm/.helmignore","helm/Chart.yaml","helm/charts/backend/.helmignore","helm/charts/backend/Chart.yaml","helm/charts/backend/templates/deployment.yaml","helm/charts/backend/templates/mysql-externalName-service.yml","helm/charts/backend/templates/secret.yaml","helm/charts/backend/templates/service.yaml","helm/charts/backend/values.yaml","helm/charts/frontend/.helmignore","helm/charts/frontend/Chart.yaml","helm/charts/frontend/templates/deployment.yaml","helm/charts/frontend/templates/ingress.yaml","helm/charts/frontend/templates/service.yaml","helm/charts/frontend/values.yaml","helm/templates/NOTES.txt","helm/templates/_helpers.tpl","helm/values.yaml","jenkins-setup.yml","k8s/backend-deployment.yml","k8s/backend-service.yml","k8s/externalDNS.yml","k8s/frontend-deployment.yml","k8s/frontend-service.yml","k8s/hpa-backend.yml","k8s/ingress.yml","k8s/mysql-externalName-service.yml","k8s/secret.yml","k8s-deployment-rollout-status.sh","kubernetes-apply-2.sh","kubernetes-apply-backend.sh","kubernetes-apply.sh","kubernetes-script.sh","kustomization-backup/alert-manager-ingress.yml","kustomization-backup/argocd-ingress.yml","kustomization-backup/argocd-service.yml","kustomization-backup/argocd-sidecar-cm.yml","kustomization-backup/backend-deployment.yml","kustomization-backup/backend-service.yml","kustomization-backup/base/backend-deployment.yml","kustomization-backup/base/backend-service.yml","kustomization-backup/base/frontend-deployment.yml","kustomization-backup/base/frontend-service.yml","kustomization-backup/base/kustomization.yml","kustomization-backup/base/mysql-externalName-service.yml","kustomization-backup/components/db-external-secret.yml","kustomization-backup/components/employee-ingress.yml","kustomization-backup/components/kustomization.yml","kustomization-backup/externalDNS.yml","kustomization-backup/frontend-deployment.yml","kustomization-backup/frontend-service.yml","kustomization-backup/grafana-ingress.yml","kustomization-backup/hpa-backend.yml","kustomization-backup/ingress.yml","kustomization-backup/jenkins-setup-2.yml","kustomization-backup/jenkins-setup.yml","kustomization-backup/kustomization.yml","kustomization-backup/mysql-externalName-service.yml","kustomization-backup/overlays/dev/kustomization.yml","kustomization-backup/overlays/prod/test.md","kustomization-backup/platform/external-dns/externalDNS.yml","kustomization-backup/platform/external-dns/kustomization.yml","kustomization-backup/platform/external-monitoring/alert-manager-ingress.yml","kustomization-backup/platform/external-monitoring/argocd-ingress.yml","kustomization-backup/platform/external-monitoring/argocd-service.yml","kustomization-backup/platform/external-monitoring/argocd-sidecar-cm.yml","kustomization-backup/platform/external-monitoring/grafana-ingress.yml","kustomization-backup/platform/external-monitoring/prom-ingress.yml","kustomization-backup/platform/external-secret/aws-secrets-store.yml","kustomization-backup/platform/external-secret/kustomization.yml","kustomization-backup/platform/rbac/jenkins-setup.yml","kustomization-backup/prom-ingress.yml","kustomization-backup/secret.yml","kustomize/base/backend-deployment.yml","kustomize/base/backend-service.yml","kustomize/base/frontend-deployment.yml","kustomize/base/frontend-service.yml","kustomize/base/kustomization.yml","kustomize/base/mysql-externalName-service.yml","kustomize/components/db-external-secret.yml","kustomize/components/employee-ingress.yml","kustomize/components/kustomization.yml","kustomize/overlays/dev/kustomization.yml","kustomize/overlays/prod/test.md","kustomize/platform/external-dns/externalDNS.yml","kustomize/platform/external-dns/kustomization.yml","kustomize/platform/external-monitoring/alert-manager-ingress.yml","kustomize/platform/external-monitoring/argocd-ingress.yml","kustomize/platform/external-monitoring/argocd-service.yml","kustomize/platform/external-monitoring/argocd-sidecar-cm.yml","kustomize/platform/external-monitoring/grafana-ingress.yml","kustomize/platform/external-monitoring/prom-ingress.yml","kustomize/platform/external-secret/aws-secrets-store.yml","kustomize/platform/external-secret/kustomization.yml","kustomize/platform/rbac/jenkins-setup.yml","monitoring/alert-manager-configuration.yml","monitoring/alert-rules.yml","monitoring/email-secret.yml","nginx/.gitignore","nginx/Dockerfile","nginx/default.conf","opa-k8s-security.rego","reports/dependency-check-report.json","reports/njsscan.sarif","reports/retire.json","reports/semgrep.json","reports/upload-reports.py","results.json","semgrep.json","trivy-docker-bench.sh","trivy-k8s-image.json","trivy-k8s-scan.sh","trivy.json"]},"interfile_languages_used":[],"skipped_rules":[]}